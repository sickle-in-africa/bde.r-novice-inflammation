I"<p>The R Console and other interactive tools like RStudio are great for prototyping code and exploring data, but sooner or later we will want to use our program in a pipeline or run it in a shell script to process thousands of data files.
In order to do that, we need to make our programs work like other Unix command-line tools.
For example, we may want a program that reads a data set and prints the average inflammation per patient:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>Rscript readings.R <span class="nt">--mean</span> data/inflammation-01.csv
5.45
5.425
6.1
...
6.4
7.05
5.9
</code></pre></div></div>

<p>but we might also want to look at the minimum of the first four lines</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">head</span> <span class="nt">-4</span> data/inflammation-01.csv | Rscript readings.R <span class="nt">--min</span>
</code></pre></div></div>

<p>or the maximum inflammations in several files one after another:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>Rscript readings.R <span class="nt">--max</span> data/inflammation-<span class="k">*</span>.csv
</code></pre></div></div>

<p>Our overall requirements are:</p>

<ol>
  <li>If no filename is given on the command line, read data from <a href="../reference.html#standard-input-stdin">standard input</a>.</li>
  <li>If one or more filenames are given, read data from them and report statistics for each file separately.</li>
  <li>Use the <code class="language-plaintext highlighter-rouge">--min</code>, <code class="language-plaintext highlighter-rouge">--mean</code>, or <code class="language-plaintext highlighter-rouge">--max</code> flag to determine what statistic to print.</li>
</ol>

<p>To make this work, we need to know how to handle command-line arguments in a program, and how to get at standard input.
We’ll tackle these questions in turn below.</p>

<h3 id="command-line-arguments">Command-Line Arguments</h3>

<p>Using the text editor of your choice, save the following line of code in a text file called <code class="language-plaintext highlighter-rouge">session-info.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sessionInfo()
</code></pre></div></div>

<p>The function, <code class="language-plaintext highlighter-rouge">sessionInfo</code>, outputs the version of R you are running as well as the type of computer you are using (as well as the versions of the packages that have been loaded).
This is very useful information to include when asking others for help with your R code.</p>

<p>Now we can run the code in the file we created from the Unix Shell using <code class="language-plaintext highlighter-rouge">Rscript</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript session-info.R
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R version 3.6.3 (2020-02-29)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.2 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

locale:
 [1] LC_CTYPE=en_ZA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_ZA.UTF-8        LC_COLLATE=en_ZA.UTF-8    
 [5] LC_MONETARY=en_ZA.UTF-8    LC_MESSAGES=en_ZA.UTF-8   
 [7] LC_PAPER=en_ZA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_ZA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.6.3
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="the-right-directory">The Right Directory</h2>

  <p>If that did not work, you might have seen an error message indicating that the file <code class="language-plaintext highlighter-rouge">session-info.R</code> does not exist.
Remember that you must be in the correct directory, the one in which you created your script file.
You can determine which directory you are currently in using <code class="language-plaintext highlighter-rouge">pwd</code> and change to a different directory using <code class="language-plaintext highlighter-rouge">cd</code>.
For a review, see this <a href="https://swcarpentry.github.io/shell-novice/02-filedir/">lesson</a>.</p>
</blockquote>

<p>Now let’s create another script that does something more interesting. Write the following lines in a file named <code class="language-plaintext highlighter-rouge">print-args.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>args &lt;- commandArgs()
cat(args, sep = "\n")
</code></pre></div></div>

<p>The function <code class="language-plaintext highlighter-rouge">commandArgs</code> extracts all the command line arguments and returns them as a vector.
The function <code class="language-plaintext highlighter-rouge">cat</code>, similar to the <code class="language-plaintext highlighter-rouge">cat</code> of the Unix Shell, outputs the contents of the variable.
Since we did not specify a filename for writing, <code class="language-plaintext highlighter-rouge">cat</code> sends the output to <a href="../reference.html#standard-output-stdout">standard output</a>,
which we can then pipe to other Unix functions.
Because we set the argument <code class="language-plaintext highlighter-rouge">sep</code> to <code class="language-plaintext highlighter-rouge">"\n"</code>, which is the symbol to start a new line, each element of the vector is printed on its own line.
Let’s see what happens when we run this program in the Unix Shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript print-args.R
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/lib/R/bin/exec/R
--slave
--no-restore
--file=print-args.R
</code></pre></div></div>

<p>From this output, we learn that <code class="language-plaintext highlighter-rouge">Rscript</code> is just a convenience command for running R scripts.
The first argument in the vector is the path to the <code class="language-plaintext highlighter-rouge">R</code> executable.
The following are all command-line arguments that affect the behavior of R.
From the R help file:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--slave</code>: Make R run as quietly as possible</li>
  <li><code class="language-plaintext highlighter-rouge">--no-restore</code>: Don’t restore anything that was created during the R session</li>
  <li><code class="language-plaintext highlighter-rouge">--file</code>: Run this file</li>
  <li><code class="language-plaintext highlighter-rouge">--args</code>: Pass these arguments to the file being run</li>
</ul>

<p>Thus running a file with Rscript is an easier way to run the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R <span class="nt">--slave</span> <span class="nt">--no-restore</span> <span class="nt">--file</span><span class="o">=</span>print-args.R <span class="nt">--args</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/lib/R/bin/exec/R
--slave
--no-restore
--file=print-args.R
--args
</code></pre></div></div>

<p>If we run it with a few arguments, however:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript print-args.R first second third
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/lib/R/bin/exec/R
--slave
--no-restore
--file=print-args.R
--args
first
second
third
</code></pre></div></div>

<p>then <code class="language-plaintext highlighter-rouge">commandArgs</code> adds each of those arguments to the vector it returns.
Since the first elements of the vector are always the same, we can tell <code class="language-plaintext highlighter-rouge">commandArgs</code> to only return the arguments that come after <code class="language-plaintext highlighter-rouge">--args</code>.
Let’s update <code class="language-plaintext highlighter-rouge">print-args.R</code> and save it as <code class="language-plaintext highlighter-rouge">print-args-trailing.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>args &lt;- commandArgs(trailingOnly = TRUE)
cat(args, sep = "\n")
</code></pre></div></div>

<p>And then run <code class="language-plaintext highlighter-rouge">print-args-trailing</code> from the Unix Shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript print-args-trailing.R first second third
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>first
second
third
</code></pre></div></div>

<p>Now <code class="language-plaintext highlighter-rouge">commandArgs</code> returns only the arguments that we listed after <code class="language-plaintext highlighter-rouge">print-args-trailing.R</code>.</p>

<p>With this in hand, let’s build a version of <code class="language-plaintext highlighter-rouge">readings.R</code> that always prints the per-patient (per-row) mean of a single data file.
The first step is to write a function that outlines our implementation, and a placeholder for the function that does the actual work.
By convention this function is usually called <code class="language-plaintext highlighter-rouge">main</code>, though we can call it whatever we want.
Write the following code in a file called <code class="language-plaintext highlighter-rouge">readings-01.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  filename &lt;- args[1]
  dat &lt;- read.csv(file = filename, header = FALSE)
  mean_per_patient &lt;- apply(dat, 1, mean)
  cat(mean_per_patient, sep = "\n")
}
</code></pre></div></div>

<p>This function gets the name of the file to process from the first element returned by <code class="language-plaintext highlighter-rouge">commandArgs</code>.
Here’s a simple test to run from the Unix Shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript readings-01.R data/inflammation-01.csv
</code></pre></div></div>

<p>There is no output because we have defined a function, but haven’t actually called it.
Let’s add a call to <code class="language-plaintext highlighter-rouge">main</code> and save it as <code class="language-plaintext highlighter-rouge">readings-02.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  filename &lt;- args[1]
  dat &lt;- read.csv(file = filename, header = FALSE)
  mean_per_patient &lt;- apply(dat, 1, mean)
  cat(mean_per_patient, sep = "\n")
}

main()
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript readings-02.R data/inflammation-01.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5.45
5.425
6.1
5.9
5.55
6.225
5.975
6.65
6.625
6.525
6.775
5.8
6.225
5.75
5.225
6.3
6.55
5.7
5.85
6.55
5.775
5.825
6.175
6.1
5.8
6.425
6.05
6.025
6.175
6.55
6.175
6.35
6.725
6.125
7.075
5.725
5.925
6.15
6.075
5.75
5.975
5.725
6.3
5.9
6.75
5.925
7.225
6.15
5.95
6.275
5.7
6.1
6.825
5.975
6.725
5.7
6.25
6.4
7.05
5.9
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="a-simple-command-line-program">A Simple Command-Line Program</h2>

  <ol>
    <li>
      <p>Write a command-line program that does addition and subtraction of two numbers.</p>

      <p><strong>Hint:</strong> Everything argument read from the command-line is interpreted as a character <a href="../reference.html#string">string</a>.
You can convert from a string to a number using the function <code class="language-plaintext highlighter-rouge">as.numeric</code>.</p>
    </li>
  </ol>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript arith.R 1 + 2
</code></pre></div>  </div>

  <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
</code></pre></div>  </div>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript arith.R 3 - 4
</code></pre></div>  </div>

  <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-1
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>arith.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  # Performs addition or subtraction from the command line.
  #
  # Takes three arguments:
  # The first and third are the numbers.
  # The second is either + for addition or - for subtraction.
  #
  # Ex. usage:
  #   Rscript arith.R 1 + 2
  #   Rscript arith.R 3 - 4
  #
  args &lt;- commandArgs(trailingOnly = TRUE)
  num1 &lt;- as.numeric(args[1])
  operation &lt;- args[2]
  num2 &lt;- as.numeric(args[3])
  if (operation == "+") {
    answer &lt;- num1 + num2
    cat(answer)
  } else if (operation == "-") {
    answer &lt;- num1 - num2
    cat(answer)
  } else {
    stop("Invalid input. Use + for addition or - for subtraction.")
  }
}

main()
</code></pre></div>    </div>
  </blockquote>

  <ol>
    <li>What goes wrong if you try to add multiplication using <code class="language-plaintext highlighter-rouge">*</code> to the program?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>
    <p>An error message is returned due to “invalid input.”
This is likely because ‘*’ has a special meaning in the shell, as a wildcard.</p>
  </blockquote>

  <ol>
    <li>Using the function <code class="language-plaintext highlighter-rouge">list.files</code> introduced in a previous <a href="../03-loops-R/">lesson</a>,
write a command-line program called <code class="language-plaintext highlighter-rouge">find-pattern.R</code>
that lists all the files in the current directory that contain a specific pattern:</li>
  </ol>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># For example, searching for the pattern "print-args" returns the two scripts we wrote earlier</span>
Rscript find-pattern.R print-args
</code></pre></div>  </div>

  <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print-args-trailing.R
print-args.R
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>find-pattern.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  # Finds all files in the current directory that contain a given pattern.
  #
  # Takes one argument: the pattern to be searched.
  #
  # Ex. usage:
  #   Rscript find-pattern.R csv
  #
  args &lt;- commandArgs(trailingOnly = TRUE)
  pattern &lt;- args[1]
  files &lt;- list.files(pattern = pattern)
  cat(files, sep = "\n")
}

main()
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<h3 id="handling-multiple-files">Handling Multiple Files</h3>

<p>The next step is to teach our program how to handle multiple files.
Since 60 lines of output per file is a lot to page through, we’ll start by using three smaller files, each of which has three days of data for two patients.
Let’s investigate them from the Unix Shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls </span>data/small-<span class="k">*</span>.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data/small-01.csv
data/small-02.csv
data/small-03.csv
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>data/small-01.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0,0,1
0,1,2
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript readings-02.R data/small-01.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.3333333
1
</code></pre></div></div>

<p>Using small data files as input also allows us to check our results more easily: here, for example, we can see that our program is calculating the mean correctly for each line, whereas we were really taking it on faith before.
This is yet another rule of programming: test the simple things first.</p>

<p>We want our program to process each file separately, so we need a loop that executes once for each filename.
If we specify the files on the command line, the filenames will be returned by <code class="language-plaintext highlighter-rouge">commandArgs(trailingOnly = TRUE)</code>.
We’ll need to handle an unknown number of filenames, since our program could be run for any number of files.</p>

<p>The solution is to loop over the vector returned by <code class="language-plaintext highlighter-rouge">commandArgs(trailingOnly = TRUE)</code>.
Here’s our changed program, which we’ll save as <code class="language-plaintext highlighter-rouge">readings-03.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  for (filename in args) {
    dat &lt;- read.csv(file = filename, header = FALSE)
    mean_per_patient &lt;- apply(dat, 1, mean)
    cat(mean_per_patient, sep = "\n")
  }
}

main()
</code></pre></div></div>

<p>and here it is in action:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript readings-03.R data/small-01.csv data/small-02.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.3333333
1
13.66667
11
</code></pre></div></div>

<p><strong>Note</strong>: at this point, we have created three versions of our script called <code class="language-plaintext highlighter-rouge">readings-01.R</code>, <code class="language-plaintext highlighter-rouge">readings-02.R</code>, and <code class="language-plaintext highlighter-rouge">readings-03.R</code>.
We wouldn’t do this in real life: instead, we would have one file called <code class="language-plaintext highlighter-rouge">readings.R</code> that we committed to version control every time we got an enhancement working.
For teaching, though, we need all the successive versions side by side.</p>

<blockquote class="challenge">
  <h2 id="a-command-line-program-with-arguments">A Command Line Program with Arguments</h2>

  <p>Write a program called <code class="language-plaintext highlighter-rouge">check.R</code>
that takes the names of one or more inflammation data files as arguments
and checks that all the files have the same number of rows and columns.
What is the best way to test your program?</p>

  <blockquote class="solution">
    <h2 id="solution-3">Solution</h2>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>check.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  # Checks that all csv files have the same number of rows and columns.
  #
  # Takes multiple arguments: the names of the files to be checked.
  #
  # Ex. usage:
  #   Rscript check.R inflammation-*
  #
  args &lt;- commandArgs(trailingOnly = TRUE)
  first_file &lt;- read.csv(args[1], header = FALSE)
  first_dim &lt;- dim(first_file)
#   num_rows &lt;- dim(first_file)[1]  # nrow(first_file)
#   num_cols &lt;- dim(first_file)[2]  # ncol(first_file)
  
  
  for (filename in args[-1]) {
    new_file &lt;- read.csv(filename, header = FALSE)
    new_dim &lt;- dim(new_file)
    if (new_dim[1] != first_dim[1] | new_dim[2] != first_dim[2]) {
      cat("Not all the data files have the same dimensions.")
    }
  }
}

main()
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<h3 id="handling-command-line-flags">Handling Command-Line Flags</h3>

<p>The next step is to teach our program to pay attention to the <code class="language-plaintext highlighter-rouge">--min</code>, <code class="language-plaintext highlighter-rouge">--mean</code>, and <code class="language-plaintext highlighter-rouge">--max</code> flags.
These always appear before the names of the files, so let’s save the following in <code class="language-plaintext highlighter-rouge">readings-04.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  action &lt;- args[1]
  filenames &lt;- args[-1]

  for (f in filenames) {
    dat &lt;- read.csv(file = f, header = FALSE)

    if (action == "--min") {
      values &lt;- apply(dat, 1, min)
    } else if (action == "--mean") {
      values &lt;- apply(dat, 1, mean)
    } else if (action == "--max") {
      values &lt;- apply(dat, 1, max)
    }
    cat(values, sep = "\n")
  }
}

main()
</code></pre></div></div>

<p>And we can confirm this works by running it from the Unix Shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript readings-04.R <span class="nt">--max</span> data/small-01.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
</code></pre></div></div>

<p>but there are several things wrong with it:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">main</code> is too large to read comfortably.</p>
  </li>
  <li>
    <p>If <code class="language-plaintext highlighter-rouge">action</code> isn’t one of the three recognized flags, the program loads each file but does nothing with it (because none of the branches in the conditional match).
<a href="../reference.html#silent-failure">Silent failures</a> like this are always hard to debug.</p>
  </li>
</ol>

<p>This version pulls the processing of each file out of the loop into a function of its own.
It also checks that <code class="language-plaintext highlighter-rouge">action</code> is one of the allowed flags before doing any processing, so that the program fails fast. We’ll save it as <code class="language-plaintext highlighter-rouge">readings-05.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  action &lt;- args[1]
  filenames &lt;- args[-1]
  stopifnot(action %in% c("--min", "--mean", "--max"))

  for (f in filenames) {
    process(f, action)
  }
}

process &lt;- function(filename, action) {
  dat &lt;- read.csv(file = filename, header = FALSE)

  if (action == "--min") {
    values &lt;- apply(dat, 1, min)
  } else if (action == "--mean") {
    values &lt;- apply(dat, 1, mean)
  } else if (action == "--max") {
    values &lt;- apply(dat, 1, max)
  }
  cat(values, sep = "\n")
}

main()
</code></pre></div></div>

<p>This is four lines longer than its predecessor, but broken into more digestible chunks of 8 and 12 lines.</p>

<blockquote class="callout">
  <h2 id="parsing-command-line-flags">Parsing Command-Line Flags</h2>

  <p>R has a package named <a href="https://cran.r-project.org/package=argparse">argparse</a> that helps handle complex command-line flags (it utilizes a <a href="https://docs.python.org/dev/library/argparse.html">Python module</a> of the same name).
We will not cover this package in this lesson but when you start writing programs with multiple parameters you’ll want to read through the package’s <a href="https://cran.r-project.org/package=argparse/vignettes/argparse.html">vignette</a>.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="shorter-command-line-arguments">Shorter Command Line Arguments</h2>

  <p>Rewrite this program so that it uses <code class="language-plaintext highlighter-rouge">-n</code>, <code class="language-plaintext highlighter-rouge">-m</code>, and <code class="language-plaintext highlighter-rouge">-x</code> instead of <code class="language-plaintext highlighter-rouge">--min</code>, <code class="language-plaintext highlighter-rouge">--mean</code>, and <code class="language-plaintext highlighter-rouge">--max</code> respectively.
Is the code easier to read?
Is the program easier to understand?</p>

  <p>Separately, modify the program so that if no action is specified (or an incorrect action is given), it prints a message explaining how it should be used.</p>

  <blockquote class="solution">
    <h2 id="solution-4">Solution</h2>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>readings-short.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  action &lt;- args[1]
  filenames &lt;- args[-1]
  stopifnot(action %in% c("-n", "-m", "-x"))

  for (f in filenames) {
    process(f, action)
  }
}

process &lt;- function(filename, action) {
  dat &lt;- read.csv(file = filename, header = FALSE)

  if (action == "-n") {
    values &lt;- apply(dat, 1, min)
  } else if (action == "-m") {
    values &lt;- apply(dat, 1, mean)
  } else if (action == "-x") {
    values &lt;- apply(dat, 1, max)
  }
  cat(values, sep = "\n")
}

main()
</code></pre></div>    </div>
    <p>The program is neither easier to read nor easier to understand due to the 
ambiguity of the argument names.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>readings-usage.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  action &lt;- args[1]
  filenames &lt;- args[-1]
  if (!(action %in% c("--min", "--mean", "--max"))) {
    usage()
  } else if (length(filenames) == 0) {
    process(file("stdin"), action)
  } else {
    for (f in filenames) {
      process(f, action)
    }
  }
}

process &lt;- function(filename, action) {
  dat &lt;- read.csv(file = filename, header = FALSE)

  if (action == "--min") {
    values &lt;- apply(dat, 1, min)
  } else if (action == "--mean") {
    values &lt;- apply(dat, 1, mean)
  } else if (action == "--max") {
    values &lt;- apply(dat, 1, max)
  }
  cat(values, sep = "\n")
}

usage &lt;- function() {
  cat("usage: Rscript readings-usage.R [--min, --mean, --max] filenames", sep = "\n")
}

main()
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<h3 id="handling-standard-input">Handling Standard Input</h3>

<p>The next thing our program has to do is read data from standard input if no filenames are given so that we can put it in a pipeline, redirect input to it, and so on.
Let’s experiment in another script, which we’ll save as <code class="language-plaintext highlighter-rouge">count-stdin.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lines &lt;- readLines(con = file("stdin"))
count &lt;- length(lines)
cat("lines in standard input: ")
cat(count, sep = "\n")
</code></pre></div></div>

<p>This little program reads lines from the program’s standard input using <code class="language-plaintext highlighter-rouge">file("stdin")</code>.
This allows us to do almost anything with it that we could do to a regular file.
In this example, we passed it as an argument to the function <code class="language-plaintext highlighter-rouge">readLines</code>, which stores each line as an element in a vector.
Let’s try running it from the Unix Shell as if it were a regular command-line program:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript count-stdin.R &lt; data/small-01.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lines in standard input: 2
</code></pre></div></div>

<p>Note that because we did not specify <code class="language-plaintext highlighter-rouge">sep = "\n"</code> when calling <code class="language-plaintext highlighter-rouge">cat</code>, the output is written on the same line.</p>

<p>A common mistake is to try to run something that reads from standard input like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript count-stdin.R data/small-01.csv
</code></pre></div></div>

<p>i.e., to forget the <code class="language-plaintext highlighter-rouge">&lt;</code> character that redirect the file to standard input.
In this case, there’s nothing in standard input, so the program waits at the start of the loop for someone to type something on the keyboard.
We can type some input, but R keeps running because it doesn’t know when the standard input has ended.
If you ran this, you can pause R by typing <kbd>Ctrl</kbd>+<kbd>Z</kbd> (technically it is still paused in the background; if you want to fully kill the process type <code class="language-plaintext highlighter-rouge">kill %</code>; see <a href="https://www.gnu.org/software/bash/manual/bash.html#Job-Control-Basics">bash manual</a> for more information).</p>

<p>We now need to rewrite the program so that it loads data from <code class="language-plaintext highlighter-rouge">file("stdin")</code> if no filenames are provided.
Luckily, <code class="language-plaintext highlighter-rouge">read.csv</code> can handle either a filename or an open file as its first parameter, so we don’t actually need to change <code class="language-plaintext highlighter-rouge">process</code>.
That leaves <code class="language-plaintext highlighter-rouge">main</code>, which we’ll update and save as <code class="language-plaintext highlighter-rouge">readings-06.R</code>:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  action &lt;- args[1]
  filenames &lt;- args[-1]
  stopifnot(action %in% c("--min", "--mean", "--max"))

  if (length(filenames) == 0) {
    process(file("stdin"), action)
  } else {
    for (f in filenames) {
      process(f, action)
    }
  }
}

process &lt;- function(filename, action) {
  dat &lt;- read.csv(file = filename, header = FALSE)

  if (action == "--min") {
    values &lt;- apply(dat, 1, min)
  } else if (action == "--mean") {
    values &lt;- apply(dat, 1, mean)
  } else if (action == "--max") {
    values &lt;- apply(dat, 1, max)
  }
  cat(values, sep = "\n")
}

main()
</code></pre></div></div>

<p>Let’s try it out.
Instead of calculating the mean inflammation of every patient, we’ll only calculate the mean for the first 10 patients (rows):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">head </span>data/inflammation-01.csv | Rscript readings-06.R <span class="nt">--mean</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5.45
5.425
6.1
5.9
5.55
6.225
5.975
6.65
6.625
6.525
</code></pre></div></div>

<p>And now we’re done: the program now does everything we set out to do.</p>

<blockquote class="challenge">
  <h2 id="implementing-wc-in-r">Implementing <code class="language-plaintext highlighter-rouge">wc</code> in R</h2>

  <p>Write a program called <code class="language-plaintext highlighter-rouge">line-count.R</code> that works like the Unix <code class="language-plaintext highlighter-rouge">wc</code> command:</p>

  <ul>
    <li>If no filenames are given, it reports the number of lines in standard input.</li>
    <li>If one or more filenames are given, it reports the number of lines in each, followed by the total number of lines.</li>
  </ul>

  <blockquote class="solution">
    <h2 id="solution-5">Solution</h2>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>line-count.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main &lt;- function() {
  args &lt;- commandArgs(trailingOnly = TRUE)
  if (length(args) &gt; 0) {
    total_lines &lt;- 0
    for (filename in args) {
      input &lt;- readLines(filename)
      num_lines &lt;- length(input)
      cat(filename)
      cat(" ")
      cat(num_lines, sep = "\n")
      total_lines &lt;- total_lines + num_lines
    }
    if (length(args) &gt; 1) {
      cat("Total ")
      cat(total_lines, sep = "\n")
    }
  } else {
    input &lt;- readLines(file("stdin"))
    num_lines &lt;- length(input)
    cat(num_lines, sep = "\n")
  }
}

main()
</code></pre></div>    </div>
  </blockquote>
</blockquote>

:ET