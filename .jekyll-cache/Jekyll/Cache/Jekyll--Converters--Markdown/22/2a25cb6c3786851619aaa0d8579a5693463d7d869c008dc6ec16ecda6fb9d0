I"<Â<h3 id="understanding-basic-data-types-and-data-structures-in-r">Understanding Basic Data Types and Data Structures in R</h3>

<p>To make the best of the R language, you‚Äôll need a strong understanding of the
basic data types and data structures and how to operate on them.</p>

<p>Data structures are very important to understand because these are the objects you 
will manipulate on a day-to-day basis in R. Dealing with object conversions is one
of the most common sources of frustration for beginners.</p>

<p><strong>Everything</strong> in R is an object.</p>

<p>R has 6 basic data types. (In addition to the five listed below, there is also
<em>raw</em> which will not be discussed in this workshop.)</p>

<ul>
  <li>character</li>
  <li>numeric (real or decimal)</li>
  <li>integer</li>
  <li>logical</li>
  <li>complex</li>
</ul>

<p>Elements of these data types may be combined to form data structures, such as
atomic vectors. When we call a vector <em>atomic</em>, we mean that the vector only 
holds data of a single data type. Below are examples of atomic character vectors,
numeric vectors, integer vectors, etc.</p>

<ul>
  <li><strong>character</strong>: <code class="language-plaintext highlighter-rouge">"a"</code>, <code class="language-plaintext highlighter-rouge">"swc"</code></li>
  <li><strong>numeric</strong>: <code class="language-plaintext highlighter-rouge">2</code>, <code class="language-plaintext highlighter-rouge">15.5</code></li>
  <li><strong>integer</strong>: <code class="language-plaintext highlighter-rouge">2L</code> (the <code class="language-plaintext highlighter-rouge">L</code> tells R to store this as an integer)</li>
  <li><strong>logical</strong>: <code class="language-plaintext highlighter-rouge">TRUE</code>, <code class="language-plaintext highlighter-rouge">FALSE</code></li>
  <li><strong>complex</strong>: <code class="language-plaintext highlighter-rouge">1+4i</code> (complex numbers with real and imaginary parts)</li>
</ul>

<p>R provides many functions to examine features of vectors and other objects, for
example</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class()</code> - what kind of object is it (high-level)?</li>
  <li><code class="language-plaintext highlighter-rouge">typeof()</code> - what is the object‚Äôs data type (low-level)?</li>
  <li><code class="language-plaintext highlighter-rouge">length()</code> - how long is it? What about two dimensional objects?</li>
  <li><code class="language-plaintext highlighter-rouge">attributes()</code> - does it have any metadata?</li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"dataset"</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "character"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">attributes</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NULL
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">y</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  1  2  3  4  5  6  7  8  9 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "integer"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="n">z</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  1  2  3  4  5  6  7  8  9 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "double"
</code></pre></div></div>

<p>R has many <strong>data structures</strong>. These include</p>

<ul>
  <li>atomic vector</li>
  <li>list</li>
  <li>matrix</li>
  <li>data frame</li>
  <li>factors</li>
</ul>

<h3 id="vectors">Vectors</h3>

<p>A vector is the most common and basic data structure in R and is pretty much the
workhorse of R. Technically, vectors can be one of two types:</p>

<ul>
  <li>atomic vectors</li>
  <li>lists</li>
</ul>

<p>although the term ‚Äúvector‚Äù most commonly refers to the atomic types not to lists.</p>

<h3 id="the-different-vector-modes">The Different Vector Modes</h3>

<p>A vector is a collection of elements that are most commonly of mode <code class="language-plaintext highlighter-rouge">character</code>,
<code class="language-plaintext highlighter-rouge">logical</code>, <code class="language-plaintext highlighter-rouge">integer</code> or <code class="language-plaintext highlighter-rouge">numeric</code>.</p>

<p>You can create an empty vector with <code class="language-plaintext highlighter-rouge">vector()</code>. (By default the mode is
<code class="language-plaintext highlighter-rouge">logical</code>. You can be more explicit as shown in the examples below.) It is more
common to use direct constructors such as <code class="language-plaintext highlighter-rouge">character()</code>, <code class="language-plaintext highlighter-rouge">numeric()</code>, etc.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="p">()</span><span class="w"> </span><span class="c1"># an empty 'logical' (the default) vector</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logical(0)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="p">(</span><span class="s2">"character"</span><span class="p">,</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="c1"># a vector of mode 'character' with 5 elements</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "" "" "" "" ""
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">character</span><span class="p">(</span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="c1"># the same thing, but using the constructor directly</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "" "" "" "" ""
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numeric</span><span class="p">(</span><span class="m">5</span><span class="p">)</span><span class="w">   </span><span class="c1"># a numeric vector with 5 elements</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 0 0 0 0 0
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logical</span><span class="p">(</span><span class="m">5</span><span class="p">)</span><span class="w">   </span><span class="c1"># a logical vector with 5 elements</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE FALSE FALSE FALSE FALSE
</code></pre></div></div>

<p>You can also create vectors by directly specifying their content. R will then
guess the appropriate mode of storage for the vector. For instance:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>will create a vector <code class="language-plaintext highlighter-rouge">x</code> of mode <code class="language-plaintext highlighter-rouge">numeric</code>. These are the most common kind, and
are treated as double precision real numbers. If you wanted to explicitly create
integers, you need to add an <code class="language-plaintext highlighter-rouge">L</code> to each element (or <em>coerce</em> to the integer
type using <code class="language-plaintext highlighter-rouge">as.integer()</code>).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">TRUE</code> and <code class="language-plaintext highlighter-rouge">FALSE</code> will create a vector of mode <code class="language-plaintext highlighter-rouge">logical</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>While using quoted text will create a vector of mode <code class="language-plaintext highlighter-rouge">character</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Sarah"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Tracy"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Jon"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="examining-vectors">Examining Vectors</h3>

<p>The functions <code class="language-plaintext highlighter-rouge">typeof()</code>, <code class="language-plaintext highlighter-rouge">length()</code>, <code class="language-plaintext highlighter-rouge">class()</code> and <code class="language-plaintext highlighter-rouge">str()</code> provide useful
information about your vectors and R objects in general.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "character"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 3
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "character"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> chr [1:3] "Sarah" "Tracy" "Jon"
</code></pre></div></div>

<h3 id="adding-elements">Adding Elements</h3>

<p>The function <code class="language-plaintext highlighter-rouge">c()</code> (for combine) can also be used to add elements to a vector.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="w"> </span><span class="s2">"Annette"</span><span class="p">)</span><span class="w">
</span><span class="n">z</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "Sarah"   "Tracy"   "Jon"     "Annette"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Greg"</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">)</span><span class="w">
</span><span class="n">z</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "Greg"    "Sarah"   "Tracy"   "Jon"     "Annette"
</code></pre></div></div>

<h3 id="vectors-from-a-sequence-of-numbers">Vectors from a Sequence of Numbers</h3>

<p>You can create vectors as a sequence of numbers.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">seq</span><span class="p">(</span><span class="m">10</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  1  2  3  4  5  6  7  8  9 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seq</span><span class="p">(</span><span class="n">from</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3  2.4
[16]  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9
[31]  4.0  4.1  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.0  5.1  5.2  5.3  5.4
[46]  5.5  5.6  5.7  5.8  5.9  6.0  6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9
[61]  7.0  7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9  8.0  8.1  8.2  8.3  8.4
[76]  8.5  8.6  8.7  8.8  8.9  9.0  9.1  9.2  9.3  9.4  9.5  9.6  9.7  9.8  9.9
[91] 10.0
</code></pre></div></div>

<h3 id="missing-data">Missing Data</h3>

<p>R supports missing data in vectors. They are represented as <code class="language-plaintext highlighter-rouge">NA</code> (Not Available)
and can be used for all the vector types covered in this lesson:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="m">0.7</span><span class="p">)</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="s2">"e"</span><span class="p">)</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1+5i</span><span class="p">,</span><span class="w"> </span><span class="m">2-3i</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The function <code class="language-plaintext highlighter-rouge">is.na()</code> indicates the elements of the vectors that represent
missing data, and the function <code class="language-plaintext highlighter-rouge">anyNA()</code> returns <code class="language-plaintext highlighter-rouge">TRUE</code> if the vector contains
any missing values:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="s2">"e"</span><span class="p">)</span><span class="w">
</span><span class="nf">is.na</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE  TRUE FALSE FALSE  TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">is.na</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE FALSE FALSE FALSE FALSE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">anyNA</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">anyNA</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE
</code></pre></div></div>

<h3 id="other-special-values">Other Special Values</h3>

<p><code class="language-plaintext highlighter-rouge">Inf</code> is infinity. You can have either positive or negative infinity.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">1</span><span class="o">/</span><span class="m">0</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] Inf
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">NaN</code> means Not a Number. It‚Äôs an undefined value.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">0</span><span class="o">/</span><span class="m">0</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] NaN
</code></pre></div></div>

<h3 id="what-happens-when-you-mix-types-inside-a-vector">What Happens When You Mix Types Inside a Vector?</h3>

<p>R will create a resulting vector with a mode that can most easily accommodate
all the elements it contains. This conversion between modes of storage is called
‚Äúcoercion‚Äù. When R converts the mode of storage based on its content, it is
referred to as ‚Äúimplicit coercion‚Äù. For instance, can you guess what the
following do (without running them first)?</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xx</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1.7</span><span class="p">,</span><span class="w"> </span><span class="s2">"a"</span><span class="p">)</span><span class="w">
</span><span class="n">xx</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">xx</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>You can also control how vectors are coerced explicitly using the
<code class="language-plaintext highlighter-rouge">as.&lt;class_name&gt;()</code> functions:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">as.numeric</span><span class="p">(</span><span class="s2">"1"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">as.character</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "1" "2"
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="finding-commonalities">Finding Commonalities</h2>

  <p>Do you see a property that‚Äôs common to all these vectors above?</p>
  <blockquote class="solution">
    <h2 id="solution">Solution</h2>
    <p>All vectors are one-dimensional and each element is of the same type.</p>
  </blockquote>
</blockquote>

<h3 id="objects-attributes">Objects Attributes</h3>

<p>Objects can have <strong>attributes</strong>. Attributes are part of the object. These include:</p>

<ul>
  <li>names</li>
  <li>dimnames</li>
  <li>dim</li>
  <li>class</li>
  <li>attributes (contain metadata)</li>
</ul>

<p>You can also glean other attribute-like information such as length (works on
vectors and lists) or number of characters (for character strings).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nchar</span><span class="p">(</span><span class="s2">"Software Carpentry"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 18
</code></pre></div></div>

<h3 id="matrix">Matrix</h3>

<p>In R matrices are an extension of the numeric or character vectors. They are not
a separate type of object but simply an atomic vector with dimensions; the
number of rows and columns. As with atomic vectors, the elements of a matrix must
be of the same data type.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">m</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dim</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 2 2
</code></pre></div></div>

<p>You can check that matrices are vectors with a class attribute of <code class="language-plaintext highlighter-rouge">matrix</code> by using
<code class="language-plaintext highlighter-rouge">class()</code> and <code class="language-plaintext highlighter-rouge">typeof()</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">))</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "matrix"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typeof</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "integer"
</code></pre></div></div>

<p>While <code class="language-plaintext highlighter-rouge">class()</code> shows that m is a matrix, <code class="language-plaintext highlighter-rouge">typeof()</code> shows that fundamentally the
matrix is an integer vector.</p>

<blockquote class="challenge">
  <h2 id="data-types-of-matrix-elements">Data types of matrix elements</h2>

  <p>Consider the following matrix:</p>

  <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FOURS</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="w">
  </span><span class="nf">c</span><span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">),</span><span class="w">
  </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w">
  </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div>  </div>

  <p>Given that <code class="language-plaintext highlighter-rouge">typeof(FOURS[1])</code> returns <code class="language-plaintext highlighter-rouge">"double"</code>, what would you expect
<code class="language-plaintext highlighter-rouge">typeof(FOURS)</code> to return? How do you know this is the case even without
running this code?</p>

  <p><em>Hint</em> Can matrices be composed of elements of different data types?</p>

  <blockquote>
    <h2 id="solution-1">Solution</h2>
    <p>We know that <code class="language-plaintext highlighter-rouge">typeof(FOURS)</code> will also return <code class="language-plaintext highlighter-rouge">"double"</code> since matrices 
are made of elements of the same data type. Note that you could do 
something like <code class="language-plaintext highlighter-rouge">as.character(FOURS)</code> if you needed the elements of <code class="language-plaintext highlighter-rouge">FOURS</code> 
<em>as characters</em>.</p>
  </blockquote>

</blockquote>

<p>Matrices in R are filled column-wise.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Other ways to construct a matrix</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="w">      </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="nf">dim</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>This takes a vector and transforms it into a matrix with 2 rows and 5 columns.</p>

<p>Another way is to bind columns or rows using <code class="language-plaintext highlighter-rouge">rbind()</code> and <code class="language-plaintext highlighter-rouge">cbind()</code> (‚Äúrow bind‚Äù
and ‚Äúcolumn bind‚Äù, respectively).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="w">
</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="o">:</span><span class="m">12</span><span class="w">
</span><span class="n">cbind</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     x  y
[1,] 1 10
[2,] 2 11
[3,] 3 12
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rbind</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  [,1] [,2] [,3]
x    1    2    3
y   10   11   12
</code></pre></div></div>

<p>You can also use the <code class="language-plaintext highlighter-rouge">byrow</code> argument to specify how the matrix is filled.
From R‚Äôs own documentation:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mdat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">11</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">13</span><span class="p">),</span><span class="w">
               </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w">
               </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
               </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">mdat</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1] [,2] [,3]
[1,]    1    2    3
[2,]   11   12   13
</code></pre></div></div>

<p>Elements of a matrix can be referenced by specifying the index along each
dimension (e.g. ‚Äúrow‚Äù and ‚Äúcolumn‚Äù) in single square brackets.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mdat</span><span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 13
</code></pre></div></div>

<h3 id="list">List</h3>

<p>In R lists act as containers. Unlike atomic vectors, the contents of a list are
not restricted to a single mode and can encompass any mixture of data
types. Lists are sometimes called generic vectors, because the elements of a
list can by of any type of R object, even lists containing further lists. This
property makes them fundamentally different from atomic vectors.</p>

<p>A list is a special type of vector. Each element can be a different type.</p>

<p>Create lists using <code class="language-plaintext highlighter-rouge">list()</code> or coerce other objects using <code class="language-plaintext highlighter-rouge">as.list()</code>. An empty
list of the required length can be created using <code class="language-plaintext highlighter-rouge">vector()</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="m">1+4i</span><span class="p">)</span><span class="w">
</span><span class="n">x</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1]]
[1] 1

[[2]]
[1] "a"

[[3]]
[1] TRUE

[[4]]
[1] 1+4i
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="s2">"list"</span><span class="p">,</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="c1"># empty list</span><span class="w">
</span><span class="nf">length</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 5
</code></pre></div></div>

<p>The content of elements of a list can be retrieved by using double square brackets.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NULL
</code></pre></div></div>

<p>Vectors can be coerced to lists as follows:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.list</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span><span class="nf">length</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 10
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="examining-lists">Examining Lists</h2>

  <ol>
    <li>What is the class of <code class="language-plaintext highlighter-rouge">x[1]</code>?</li>
    <li>What is the class of <code class="language-plaintext highlighter-rouge">x[[1]]</code>?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>
    <ol>
      <li>

        <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="m">1</span><span class="p">])</span><span class="w">
</span></code></pre></div>        </div>

        <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "list"
</code></pre></div>        </div>
      </li>
      <li>

        <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">x</span><span class="p">[[</span><span class="m">1</span><span class="p">]])</span><span class="w">
</span></code></pre></div>        </div>

        <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "integer"
</code></pre></div>        </div>
      </li>
    </ol>
  </blockquote>
</blockquote>

<p>Elements of a list can be named (i.e. lists can have the <code class="language-plaintext highlighter-rouge">names</code> attribute)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xlist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Karthik Ram"</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">iris</span><span class="p">))</span><span class="w">
</span><span class="n">xlist</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$a
[1] "Karthik Ram"

$b
 [1]  1  2  3  4  5  6  7  8  9 10

$data
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">names</span><span class="p">(</span><span class="n">xlist</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "a"    "b"    "data"
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="examining-named-lists">Examining Named Lists</h2>

  <ol>
    <li>What is the length of this object?</li>
    <li>What is its structure?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-3">Solution</h2>
    <ol>
      <li>

        <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">length</span><span class="p">(</span><span class="n">xlist</span><span class="p">)</span><span class="w">
</span></code></pre></div>        </div>

        <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 3
</code></pre></div>        </div>
      </li>
      <li>

        <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">xlist</span><span class="p">)</span><span class="w">
</span></code></pre></div>        </div>

        <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List of 3
 $ a   : chr "Karthik Ram"
 $ b   : int [1:10] 1 2 3 4 5 6 7 8 9 10
 $ data:'data.frame':	6 obs. of  5 variables:
  ..$ Sepal.Length: num [1:6] 5.1 4.9 4.7 4.6 5 5.4
  ..$ Sepal.Width : num [1:6] 3.5 3 3.2 3.1 3.6 3.9
  ..$ Petal.Length: num [1:6] 1.4 1.4 1.3 1.5 1.4 1.7
  ..$ Petal.Width : num [1:6] 0.2 0.2 0.2 0.2 0.2 0.4
  ..$ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1
</code></pre></div>        </div>
      </li>
    </ol>
  </blockquote>
</blockquote>

<p>Lists can be extremely useful inside functions. Because the functions in R are 
able to return only a single object, you can ‚Äústaple‚Äù together lots of different
kinds of results into a single object that a function can return.</p>

<p>A list does not print to the console like a vector. Instead, each element of the
list starts on a new line.</p>

<p>Elements are indexed by double brackets. Single brackets will still return
a(nother) list. If the elements of a list are named, they can be referenced by
the <code class="language-plaintext highlighter-rouge">$</code> notation (i.e. <code class="language-plaintext highlighter-rouge">xlist$data</code>).</p>

<h3 id="data-frame">Data Frame</h3>

<p>A data frame is a very important data type in R. It‚Äôs pretty much the <em>de facto</em>
data structure for most tabular data and what we use for statistics.</p>

<p>A data frame is a <em>special type of list</em> where every element of the list has same
length (i.e. data frame is a ‚Äúrectangular‚Äù list).</p>

<p>Data frames can have additional attributes such as <code class="language-plaintext highlighter-rouge">rownames()</code>, which can be
useful for annotating data, like <code class="language-plaintext highlighter-rouge">subject_id</code> or <code class="language-plaintext highlighter-rouge">sample_id</code>. But most of the
time they are not used.</p>

<p>Some additional information on data frames:</p>

<ul>
  <li>Usually created by <code class="language-plaintext highlighter-rouge">read.csv()</code> and <code class="language-plaintext highlighter-rouge">read.table()</code>, i.e. when importing the data into R.</li>
  <li>Assuming all columns in a data frame are of same type, data frame can be converted to a matrix with data.matrix() (preferred) or as.matrix(). Otherwise type coercion will be enforced and the results may not always be what you expect.</li>
  <li>Can also create a new data frame with <code class="language-plaintext highlighter-rouge">data.frame()</code> function.</li>
  <li>Find the number of rows and columns with <code class="language-plaintext highlighter-rouge">nrow(dat)</code> and <code class="language-plaintext highlighter-rouge">ncol(dat)</code>, respectively.</li>
  <li>Rownames are often automatically generated and look like 1, 2, ‚Ä¶, n. Consistency in numbering of rownames may not be honored when rows are reshuffled or subset.</li>
</ul>

<h3 id="creating-data-frames-by-hand">Creating Data Frames by Hand</h3>

<p>To create data frames by hand:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">letters</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">],</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">11</span><span class="o">:</span><span class="m">20</span><span class="p">)</span><span class="w">
</span><span class="n">dat</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   id  x  y
1   a  1 11
2   b  2 12
3   c  3 13
4   d  4 14
5   e  5 15
6   f  6 16
7   g  7 17
8   h  8 18
9   i  9 19
10  j 10 20
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="useful-data-frame-functions">Useful Data Frame Functions</h2>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">head()</code> - shows first 6 rows</li>
    <li><code class="language-plaintext highlighter-rouge">tail()</code> - shows last 6 rows</li>
    <li><code class="language-plaintext highlighter-rouge">dim()</code> - returns the dimensions of data frame (i.e. number of rows and number of columns)</li>
    <li><code class="language-plaintext highlighter-rouge">nrow()</code> - number of rows</li>
    <li><code class="language-plaintext highlighter-rouge">ncol()</code> - number of columns</li>
    <li><code class="language-plaintext highlighter-rouge">str()</code> - structure of data frame - name, type and preview of data in each column</li>
    <li><code class="language-plaintext highlighter-rouge">names()</code> or <code class="language-plaintext highlighter-rouge">colnames()</code> - both show the <code class="language-plaintext highlighter-rouge">names</code> attribute for a data frame</li>
    <li><code class="language-plaintext highlighter-rouge">sapply(dataframe, class)</code> - shows the class of each column in the data frame</li>
  </ul>
</blockquote>

<p>See that it is actually a special list:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">is.list</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">class</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "data.frame"
</code></pre></div></div>

<p>Because data frames are rectangular, elements of data frame can be referenced by specifying 
the row and the column index in single square brackets (similar to matrix).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dat</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 11
</code></pre></div></div>

<p>As data frames are also lists, it is possible to refer to columns (which are elements of
such list) using the list notation, i.e. either double square brackets or a <code class="language-plaintext highlighter-rouge">$</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dat</span><span class="p">[[</span><span class="s2">"y"</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1] 11 12 13 14 15 16 17 18 19 20
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dat</span><span class="o">$</span><span class="n">y</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1] 11 12 13 14 15 16 17 18 19 20
</code></pre></div></div>

<p>The following table summarizes the one-dimensional and two-dimensional data structures in 
R in relation to diversity of data types they can contain.</p>

<table>
  <thead>
    <tr>
      <th>Dimensions</th>
      <th>Homogenous</th>
      <th>Heterogeneous</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1-D</td>
      <td>atomic vector</td>
      <td>list</td>
    </tr>
    <tr>
      <td>2-D</td>
      <td>matrix</td>
      <td>data frame</td>
    </tr>
  </tbody>
</table>

<blockquote class="callout">
  <p>Lists can contain elements that are themselves muti-dimensional (e.g. a lists can contain
data frames or another type of objects). Lists can also contain elements of any length,
therefore list do not necessarily have to be ‚Äúrectangular‚Äù. However in order for the list
to qualify as a data frame, the length of each element has to be the same.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="column-types-in-data-frames">Column Types in Data Frames</h2>

  <p>Knowing that data frames are lists, can columns be of different type?</p>

  <p>What type of structure do you expect to see when you explore the structure of the <code class="language-plaintext highlighter-rouge">iris</code> data frame? Hint: Use <code class="language-plaintext highlighter-rouge">str()</code>.</p>

  <blockquote class="solution">
    <h2 id="solution-4">Solution</h2>
    <p>The Sepal.Length, Sepal.Width, Petal.Length and Petal.Width columns are all
numeric types, while Species is a Factor.
Lists can have elements of different types.
Since a Data Frame is just a special type of list, it can have columns of
differing type (although, remember that type must be consistent within each column!).</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'data.frame':	150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
</code></pre></div>    </div>
  </blockquote>
</blockquote>

:ET