I"G3<h2 id="basic-operation">Basic Operation</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge"># this is a comment in R</code></li>
  <li>Use <code class="language-plaintext highlighter-rouge">x &lt;- 3</code> to assign a value, <code class="language-plaintext highlighter-rouge">3</code>,  to a variable, <code class="language-plaintext highlighter-rouge">x</code></li>
  <li>R counts from 1, unlike many other programming languages (e.g., Python)</li>
  <li><code class="language-plaintext highlighter-rouge">length(thing)</code> returns the number of elements contained in the variable
<code class="language-plaintext highlighter-rouge">collection</code></li>
  <li><code class="language-plaintext highlighter-rouge">c(value1, value2, value3)</code> creates a vector</li>
  <li><code class="language-plaintext highlighter-rouge">container[i]</code> selects the i’th element from the variable <code class="language-plaintext highlighter-rouge">container</code></li>
</ul>

<p>List objects in current environment
<code class="language-plaintext highlighter-rouge">ls()</code></p>

<p>Remove objects in current environment
<code class="language-plaintext highlighter-rouge">rm(x)</code></p>

<p>Remove all objects from current environment
<code class="language-plaintext highlighter-rouge">rm(list = ls())</code></p>

<h2 id="control-flow">Control Flow</h2>

<ul>
  <li>Create a conditional using <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">else if</code>, and <code class="language-plaintext highlighter-rouge">else</code></li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">0</span><span class="p">){</span><span class="w">
	</span><span class="n">print</span><span class="p">(</span><span class="s2">"value is positive"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">0</span><span class="p">){</span><span class="w">
	</span><span class="n">print</span><span class="p">(</span><span class="s2">"value is negative"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="p">{</span><span class="w">
	</span><span class="n">print</span><span class="p">(</span><span class="s2">"value is neither positive nor negative"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>create a <code class="language-plaintext highlighter-rouge">for</code> loop to process elements in a collection one at a time</li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This will print:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4
5
</code></pre></div></div>

<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">==</code> to test for equality
    <ul>
      <li><code class="language-plaintext highlighter-rouge">3 == 3</code>, will return <code class="language-plaintext highlighter-rouge">TRUE</code>,</li>
      <li><code class="language-plaintext highlighter-rouge">'apple' == 'orange'</code> will return <code class="language-plaintext highlighter-rouge">FALSE</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">X &amp; Y</code> is <code class="language-plaintext highlighter-rouge">TRUE</code> is both X and Y are true</li>
  <li><code class="language-plaintext highlighter-rouge">X | Y</code> is <code class="language-plaintext highlighter-rouge">TRUE</code> if either X or Y, or both are true</li>
</ul>

<h2 id="functions">Functions</h2>

<ul>
  <li>Defining a function:</li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">is_positive</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">integer_value</span><span class="p">){</span><span class="w">
	</span><span class="k">if</span><span class="p">(</span><span class="n">integer_value</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">0</span><span class="p">){</span><span class="w">
	   </span><span class="kc">TRUE</span><span class="w">
	</span><span class="p">}</span><span class="w">
	</span><span class="k">else</span><span class="p">{</span><span class="w">
	   </span><span class="kc">FALSE</span><span class="w">
	</span><span class="p">{</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>In R, the last executed line of a function is automatically returned</p>

<ul>
  <li>Specifying a default value for a function argument</li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">increment_me</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">value_to_increment</span><span class="p">,</span><span class="w"> </span><span class="n">value_to_increment_by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">){</span><span class="w">
	</span><span class="n">value_to_increment</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">value_to_increment_by</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">increment_me(4)</code>, will return 5</p>

<p><code class="language-plaintext highlighter-rouge">increment_me(4, 6)</code>, will return 10</p>

<ul>
  <li>
    <p>Call a function by using <code class="language-plaintext highlighter-rouge">function_name(function_arguments)</code></p>
  </li>
  <li>
    <p>apply family of functions: <code class="language-plaintext highlighter-rouge">apply()</code>, <code class="language-plaintext highlighter-rouge">sapply()</code>, <code class="language-plaintext highlighter-rouge">lapply()</code>, and <code class="language-plaintext highlighter-rouge">mapply()</code></p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">apply(dat, MARGIN = 2, mean)</code> will return the average (<code class="language-plaintext highlighter-rouge">mean</code>) of each column in <code class="language-plaintext highlighter-rouge">dat</code></p>

<h2 id="packages">Packages</h2>

<ul>
  <li>Install package by using <code class="language-plaintext highlighter-rouge">install.packages("package-name")</code></li>
  <li>Update packages by using <code class="language-plaintext highlighter-rouge">update.packages("package-name")</code></li>
  <li>Load packages by using <code class="language-plaintext highlighter-rouge">library("package-name")</code></li>
</ul>

<h2 id="glossary">Glossary</h2>

<dl>
  <dt id="argument">argument</dt>
  <dd>A value given to a function or program when it runs. The term is often used interchangeably
(and inconsistently) with <a href="#parameter">parameter</a>.</dd>
  <dt id="call-stack">call stack</dt>
  <dd>A data structure inside a running program that keeps track of active function calls. Each call’s
variables are stored in a <a href="#stack-frame">stack frame</a>; a new stack frame is put on top of the stack
for each call, and discarded when the call is finished.</dd>
  <dt id="comma-separated-values-csv">comma-separated values (CSV)</dt>
  <dd>A common textual representation for tables in which the values in each row are separated by commas.</dd>
  <dt id="comment">comment</dt>
  <dd>A remark in a program that is intended to help human readers understand what is going on, but is
ignored by the computer. Comments in Python, R, and the Unix shell start with a <code class="language-plaintext highlighter-rouge">#</code> character and run
to the end of the line; comments in SQL start with <code class="language-plaintext highlighter-rouge">--</code>, and other languages have other conventions.</dd>
  <dt id="conditional-statement">conditional statement</dt>
  <dd>A statement in a program that might or might not be executed depending on whether a test is true
or false.</dd>
  <dt id="dimensions-of-an-array">dimensions (of an array)</dt>
  <dd>An array’s extent, represented as a vector. For example, an array with 5 rows and 3 columns has
dimensions <code class="language-plaintext highlighter-rouge">(5,3)</code>.</dd>
  <dt id="documentation">documentation</dt>
  <dd>Human-language text written to explain what software does, how it works, or how to use it.</dd>
  <dt id="encapsulation">encapsulation</dt>
  <dd>The practice of hiding something’s implementation details so that the rest of a program can
worry about <em>what</em> it does rather than <em>how</em> it does it.</dd>
  <dt id="for-loop">for loop</dt>
  <dd>A loop that is executed once for each value in some kind of set, list, or range. See also:
<a href="#while-loop">while loop</a>.</dd>
  <dt id="function-body">function body</dt>
  <dd>The statements that are executed inside a function.</dd>
  <dt id="function-call">function call</dt>
  <dd>A use of a function in another piece of software.</dd>
  <dt id="function-composition">function composition</dt>
  <dd>The immediate application of one function to the result of another, such as <code class="language-plaintext highlighter-rouge">f(g(x))</code>.</dd>
  <dt id="index">index</dt>
  <dd>A subscript that specifies the location of a single value in a collection, such as a single
pixel in an image.</dd>
  <dt id="loop-variable">loop variable</dt>
  <dd>The variable that keeps track of the progress of the loop.</dd>
  <dt id="notional-machine">notional machine</dt>
  <dd>An abstraction of a computer used to think about what it can and will do.</dd>
  <dt id="parameter">parameter</dt>
  <dd>A variable named in the function’s declaration that is used to hold a value passed into the call.
The term is often used interchangeably (and inconsistently) with <a href="#argument">argument</a>.</dd>
  <dt id="pipe">pipe</dt>
  <dd>A connection from the output of one program to the input of another. When two or more programs
are connected in this way, they are called a “pipeline”.</dd>
  <dt id="return-statement">return statement</dt>
  <dd>A statement that causes a function to stop executing and return a value to its caller immediately.</dd>
  <dt id="silent-failure">silent failure</dt>
  <dd>Failing without producing any warning messages. Silent failures are hard to detect and debug.</dd>
  <dt id="slice">slice</dt>
  <dd>A regular subsequence of a larger sequence, such as the first five elements or every second element.</dd>
  <dt id="stack-frame">stack frame</dt>
  <dd>A data structure that provides storage for a function’s local variables. Each time a function is
called, a new stack frame is created and put on the top of the <a href="#call-stack">call stack</a>. When the
function returns, the stack frame is discarded.</dd>
  <dt id="standard-input-stdin">standard input (stdin)</dt>
  <dd>A process’s default input stream. In interactive command-line applications, it is typically
connected to the keyboard; in a <a href="#pipe">pipe</a>, it receives data from the
<a href="#standard-output-stdout">standard output</a> of the preceding process.</dd>
  <dt id="standard-output-stdout">standard output (stdout)</dt>
  <dd>A process’s default output stream. In interactive command-line applications, data sent to
standard output is displayed on the screen; in a <a href="#pipe">pipe</a>, it is passed to the
<a href="#standard-input-stdin">standard input</a> of the next process.</dd>
  <dt id="string">string</dt>
  <dd>Short for “character string”, a sequence of zero or more characters.</dd>
  <dt id="while-loop">while loop</dt>
  <dd>A loop that keeps executing as long as some condition is true. See also: <a href="#for-loop">for loop</a>.</dd>
</dl>
:ET