I"F<h3 id="keep-track-of-who-wrote-your-code-and-its-intended-purpose">Keep track of who wrote your code and its intended purpose</h3>

<p>Starting your code with an annotated description of what the code does when it is run will help you when you have to look at or change it in the future. Just one or two lines at the beginning of the file can save you or someone else a lot of time and effort when trying to understand what a particular script does.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This is code to replicate the analyses and figures from my 2014 Science</span><span class="w">
</span><span class="c1"># paper. Code developed by Sarah Supp, Tracy Teal, and Jon Borelli</span><span class="w">
</span></code></pre></div></div>

<h3 id="be-explicit-about-the-requirements-and-dependencies-of-your-code">Be explicit about the requirements and dependencies of your code</h3>

<p>Loading all of the packages that will be necessary to run your code (using <code class="language-plaintext highlighter-rouge">library</code>) is a nice way of indicating which packages are necessary to run your code. It can be frustrating to make it two-thirds of the way through a long-running script only to find out that a dependency hasn’t been installed.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">reshape</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">vegan</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>Another way you can be explicit about the requirements of your code and improve it’s reproducibility is to limit the “hard-coding” of the input and output files for your script. If your code will read in data from a file, define a variable early in your code that stores the path to that file. For example</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input_file</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"data/data.csv"</span><span class="w"> 
</span><span class="n">output_file</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"data/results.csv"</span><span class="w">

</span><span class="c1"># read input</span><span class="w">
</span><span class="n">input_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span><span class="w">
</span><span class="c1"># get number of samples in data</span><span class="w">
</span><span class="n">sample_number</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">input_data</span><span class="p">)</span><span class="w">
</span><span class="c1"># generate results</span><span class="w">
</span><span class="n">results</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">some_other_function</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span><span class="w"> </span><span class="n">sample_number</span><span class="p">)</span><span class="w">
</span><span class="c1"># write results</span><span class="w">
</span><span class="n">write.table</span><span class="p">(</span><span class="n">results</span><span class="p">,</span><span class="w"> </span><span class="n">output_file</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>is preferable to</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check</span><span class="w">
</span><span class="n">input_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"data/data.csv"</span><span class="p">)</span><span class="w">
</span><span class="c1"># get number of samples in data</span><span class="w">
</span><span class="n">sample_number</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">input_data</span><span class="p">)</span><span class="w">
</span><span class="c1"># generate results</span><span class="w">
</span><span class="n">results</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">some_other_function</span><span class="p">(</span><span class="s2">"data/data.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">sample_number</span><span class="p">)</span><span class="w">
</span><span class="c1"># write results</span><span class="w">
</span><span class="n">write.table</span><span class="p">(</span><span class="s2">"data/results.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">output_file</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>It is also worth considering what the working directory is. If the working directory must change, it is best to do that at the beginning of the script.</p>

<blockquote class="callout">
  <h2 id="be-careful-when-using-setwd">Be careful when using <code class="language-plaintext highlighter-rouge">setwd()</code></h2>

  <p>One should exercise caution when using <code class="language-plaintext highlighter-rouge">setwd()</code>. Changing directories in a script file can limit reproducibility:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">setwd()</code> will return an error if the directory to which you’re trying to change doesn’t exist or if the user doesn’t have the correct permissions to access that directory. This becomes a problem when sharing scripts between users who have organized their directories differently.</li>
    <li>If/when your script terminates with an error, you might leave the user in a different directory than the one they started in, and if they then call the script again, this will cause further problems. If you must use <code class="language-plaintext highlighter-rouge">setwd()</code>, it is best to put it at the top of the script to avoid these problems.
The following error message indicates that R has failed to set the working directory you specified:
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in setwd("~/path/to/working/directory") : cannot change working directory
</code></pre></div>      </div>
      <p>It is best practice to have the user running the script begin in a consistent directory on their machine and then use relative file paths from that directory to access files (see below).</p>
    </li>
  </ul>
</blockquote>

<h3 id="identify-and-segregate-distinct-components-in-your-code">Identify and segregate distinct components in your code</h3>

<p>It’s easy to annotate and mark your code using <code class="language-plaintext highlighter-rouge">#</code> or <code class="language-plaintext highlighter-rouge">#-</code> to set off sections of your code and to make finding specific parts of your code easier. For example, it’s often helpful when writing code to separate the function definitions. If you create only one or a few custom functions in your script, put them toward the top of your code. If you have written many functions, put them all in their own .R file and then <code class="language-plaintext highlighter-rouge">source</code> those files. <code class="language-plaintext highlighter-rouge">source</code> will define all of these functions so that your code can make use of them as needed.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span><span class="p">(</span><span class="s2">"my_genius_fxns.R"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="other-ideas">Other ideas</h3>

<ol>
  <li>
    <p>Use a consistent style within your code. For example, name all matrices something ending in <code class="language-plaintext highlighter-rouge">_mat</code>. Consistency makes code easier to read and problems easier to spot.</p>
  </li>
  <li>
    <p>Keep your code in bite-sized chunks. If a single function or loop gets too long, consider looking for ways to break it into smaller pieces.</p>
  </li>
  <li>
    <p>Don’t repeat yourself–automate! If you are repeating the same code over and over, use a loop or a function to repeat that code for you. Needless repetition doesn’t just waste time–it also increases the likelihood you’ll make a costly mistake!</p>
  </li>
  <li>
    <p>Keep all of your source files for a project in the same directory, then use relative paths as necessary to access them. For example, use</p>
  </li>
</ol>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"files/dataset-2013-01.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>rather than:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"/Users/Karthik/Documents/sannic-project/files/dataset-2013-01.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<ol start="5">
  <li>R can run into memory issues. It is a common problem to run out of memory after running R scripts for a long time. To inspect the objects in your current R environment, you can list the objects, search current packages, and remove objects that are currently not in use. A good practice when running long lines of computationally intensive code is to remove temporary objects after they have served their purpose. However, sometimes, R will not clean up unused memory for a while after you delete objects. You can force R to tidy up its memory by using <code class="language-plaintext highlighter-rouge">gc()</code>.</li>
</ol>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Sample dataset of 1000 rows</span><span class="w">
</span><span class="n">interim_object</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">),</span><span class="w">
                             </span><span class="nf">rep</span><span class="p">(</span><span class="m">101</span><span class="o">:</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">),</span><span class="w">
                             </span><span class="nf">rep</span><span class="p">(</span><span class="m">201</span><span class="o">:</span><span class="m">300</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">))</span><span class="w">
</span><span class="n">object.size</span><span class="p">(</span><span class="n">interim_object</span><span class="p">)</span><span class="w"> </span><span class="c1"># Reports the memory size allocated to the object</span><span class="w">
</span><span class="n">rm</span><span class="p">(</span><span class="s2">"interim_object"</span><span class="p">)</span><span class="w"> </span><span class="c1"># Removes only the object itself and not necessarily the memory allotted to it</span><span class="w">
</span><span class="n">gc</span><span class="p">()</span><span class="w"> </span><span class="c1"># Force R to release memory it is no longer using</span><span class="w">
</span><span class="n">ls</span><span class="p">()</span><span class="w"> </span><span class="c1"># Lists all the objects in your current workspace</span><span class="w">
</span><span class="n">rm</span><span class="p">(</span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ls</span><span class="p">())</span><span class="w"> </span><span class="c1"># If you want to delete all the objects in the workspace and start with a clean slate</span><span class="w">
</span></code></pre></div></div>

<ol start="6">
  <li>
    <p>Don’t save a session history (the default option in R, when it asks if you want an <code class="language-plaintext highlighter-rouge">RData</code> file). Instead, start in a clean environment so that older objects don’t remain in your environment any longer than they need to. If that happens, it can lead to unexpected results.</p>
  </li>
  <li>
    <p>Wherever possible, keep track of <code class="language-plaintext highlighter-rouge">sessionInfo()</code> somewhere in your project folder. Session information is invaluable because it captures all of the packages used in the current project. If a newer version of a package changes the way a function behaves, you can always go back and reinstall the version that worked (Note: At least on CRAN, all older versions of packages are permanently archived).</p>
  </li>
  <li>
    <p>Collaborate. Grab a buddy and practice “code review”. Review is used for preparing experiments and manuscripts; why not use it for code as well? Our code is also a major scientific achievement and the product of lots of hard work!</p>
  </li>
  <li>
    <p>Develop your code using version control and frequent updates! You can find lessons about version control on <a href="https://software-carpentry.org/lessons/">software-carpentry.org/lessons</a>.</p>
  </li>
</ol>

<blockquote class="challenge">
  <h2 id="best-practice">Best Practice</h2>

  <ol>
    <li>What other suggestions do you have for coding best practices?</li>
    <li>What are some specific ways we could restructure the code we worked on today to make it easier for a new user to read? Discuss with your neighbor.</li>
    <li>Make two new R scripts called <code class="language-plaintext highlighter-rouge">inflammation.R</code> and <code class="language-plaintext highlighter-rouge">inflammation_fxns.R</code>.
Copy and paste code into each script so that <code class="language-plaintext highlighter-rouge">inflammation.R</code> “does stuff” and <code class="language-plaintext highlighter-rouge">inflammation_fxns.R</code> holds all of your functions.
<strong>Hint</strong>: you will need to add <code class="language-plaintext highlighter-rouge">source</code> to one of the files.</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>inflammation.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This code runs the inflammation data analysis.

source("inflammation_fxns.R")
analyze_all("inflammation.*csv")
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>inflammation_fxns.R
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This is code for functions used in our inflammation data analysis.

analyze &lt;- function(filename, output = NULL) {
  # Plots the average, min, and max inflammation over time.
  # Input:
  #    filename: character string of a csv file
  #    output: character string of pdf file for saving
  if (!is.null(output)) {
    pdf(output)
  }
  dat &lt;- read.csv(file = filename, header = FALSE)
  avg_day_inflammation &lt;- apply(dat, 2, mean)
  plot(avg_day_inflammation)
  max_day_inflammation &lt;- apply(dat, 2, max)
  plot(max_day_inflammation)
  min_day_inflammation &lt;- apply(dat, 2, min)
  plot(min_day_inflammation)
  if (!is.null(output)) {
    dev.off()
  }
}

analyze_all &lt;- function(pattern) {
  # Directory name containing the data
  data_dir &lt;- "data"
  # Directory name for results
  results_dir &lt;- "results"
  # Runs the function analyze for each file in the current working directory
  # that contains the given pattern.
  filenames &lt;- list.files(path = data_dir, pattern = pattern)
  for (f in filenames) {
    pdf_name &lt;- file.path(results_dir, sub("csv", "pdf", f))
    analyze(file.path(data_dir, f), output = pdf_name)
  }
}
</code></pre></div>    </div>
  </blockquote>
</blockquote>

:ET