I"î‚<p>The most common way that scientists store data is in Excel spreadsheets.
While there are R packages designed to access data from Excel spreadsheets (e.g., gdata, RODBC, XLConnect, xlsx, RExcel),
users often find it easier to save their spreadsheets in <a href="../reference.html#comma-separated-values-csv">comma-separated values</a> files (CSV)
and then use Râ€™s built in functionality to read and manipulate the data.
In this short lesson, weâ€™ll learn how to read data from a .csv and write to a new .csv,
and explore the <a href="../reference.html#argument">arguments</a> that allow you read and write the data correctly for your needs.</p>

<h3 id="read-a-csv-and-explore-the-arguments">Read a .csv and Explore the Arguments</h3>

<p>Letâ€™s start by opening a .csv file containing information on the speeds at which cars of different colors were clocked in 45 mph zones in the four-corners states (<code class="language-plaintext highlighter-rouge">CarSpeeds.csv</code>). We will use the built in <code class="language-plaintext highlighter-rouge">read.csv(...)</code> <a href="../reference.html#function-call">function call</a>, which reads the data in as a data frame, and assign the data frame to a variable (using <code class="language-plaintext highlighter-rouge">&lt;-</code>) so that it is stored in Râ€™s memory. Then we will explore some of the basic arguments that can be supplied to the function.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First, set your working directory (see episode 'Analyzing Patient Data' for more</span><span class="w">
</span><span class="c1"># info)</span><span class="w">
</span><span class="n">setwd</span><span class="p">(</span><span class="s2">"~/Desktop/r-novice-inflammation/"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import the data and look at the first six rows</span><span class="w">
</span><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Color Speed     State
1  Blue    32 NewMexico
2   Red    45   Arizona
3  Blue    35  Colorado
4 White    34   Arizona
5   Red    25   Arizona
6  Blue    41   Arizona
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="changing-delimiters">Changing Delimiters</h2>

  <p>The default delimiter of the <code class="language-plaintext highlighter-rouge">read.csv()</code> function is a comma, but you can
use other delimiters by supplying the â€˜sepâ€™ argument to the function
(e.g., typing <code class="language-plaintext highlighter-rouge">sep = ';'</code> allows a semi-colon separated file to be correctly
imported - see <code class="language-plaintext highlighter-rouge">?read.csv()</code> for more information on this and other options for
working with different file types).</p>
</blockquote>

<p>The call above will import the data, but we have not taken advantage of several handy arguments that can be helpful in loading the data in the format we want. Letâ€™s explore some of these arguments.</p>

<h3 id="the-header-argument">The <code class="language-plaintext highlighter-rouge">header</code> Argument</h3>

<p>The default for <code class="language-plaintext highlighter-rouge">read.csv(...)</code> is to set the <code class="language-plaintext highlighter-rouge">header</code> argument to <code class="language-plaintext highlighter-rouge">TRUE</code>. This means that the first row of values in the .csv is set as header information (column names). If your data set does not have a header, set the <code class="language-plaintext highlighter-rouge">header</code> argument to <code class="language-plaintext highlighter-rouge">FALSE</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The first row of the data without setting the header argument:</span><span class="w">
</span><span class="n">carSpeeds</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Color Speed     State
1  Blue    32 NewMexico
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The first row of the data if the header argument is set to FALSE:</span><span class="w">
</span><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">

</span><span class="n">carSpeeds</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     V1    V2    V3
1 Color Speed State
</code></pre></div></div>

<p>Clearly this is not the desired behavior for this data set, but it may be useful if you have a dataset without headers.</p>

<h3 id="the-stringsasfactors-argument">The <code class="language-plaintext highlighter-rouge">stringsAsFactors</code> Argument</h3>

<p>This is perhaps the most important argument in <code class="language-plaintext highlighter-rouge">read.csv()</code>, particularly if you are working with categorical data. This is because the default behavior of R is to convert character <a href="../reference.html#string">string</a>s into factors, which may make it difficult to do such things as replace values. For example, letâ€™s say we find out that the data collector was color blind, and accidentally recorded green cars as being blue. In order to correct the data set, letâ€™s replace â€˜Blueâ€™ with â€˜Greenâ€™ in the <code class="language-plaintext highlighter-rouge">$Color</code> column:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Here we will use R's `ifelse` function, in which we provide the test phrase,</span><span class="w">
</span><span class="c1"># the outcome if the result of the test is 'TRUE', and the outcome if the</span><span class="w">
</span><span class="c1"># result is 'FALSE'. We will also assign the results to the Color column,</span><span class="w">
</span><span class="c1"># using '&lt;-'</span><span class="w">

</span><span class="c1"># First - reload the data with a header</span><span class="w">
</span><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">)</span><span class="w">

</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'Blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Green'</span><span class="p">,</span><span class="w"> </span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  [1] "Green" "1"     "Green" "5"     "4"     "Green" "Green" "2"     "5"    
 [10] "4"     "4"     "5"     "Green" "Green" "2"     "4"     "Green" "Green"
 [19] "5"     "Green" "Green" "Green" "4"     "Green" "4"     "4"     "4"    
 [28] "4"     "5"     "Green" "4"     "5"     "2"     "4"     "2"     "2"    
 [37] "Green" "4"     "2"     "4"     "2"     "2"     "4"     "4"     "5"    
 [46] "2"     "Green" "4"     "4"     "2"     "2"     "4"     "5"     "4"    
 [55] "Green" "Green" "2"     "Green" "5"     "2"     "4"     "Green" "Green"
 [64] "5"     "2"     "4"     "4"     "2"     "Green" "5"     "Green" "4"    
 [73] "5"     "5"     "Green" "Green" "Green" "Green" "Green" "5"     "2"    
 [82] "Green" "5"     "2"     "2"     "4"     "4"     "5"     "5"     "5"    
 [91] "5"     "4"     "4"     "4"     "5"     "2"     "5"     "2"     "2"    
[100] "5"    
</code></pre></div></div>

<p>What happened?!? It looks like â€˜Blueâ€™ was replaced with â€˜Greenâ€™, but every other
color was turned into a number (as a character string, given the quote marks before
and after). This is because the colors of the cars were loaded as factors, and the
factor level was reported following replacement.</p>

<p>To see the internal structure, we can use another function, <code class="language-plaintext highlighter-rouge">str()</code>. In this case,
the dataframeâ€™s internal structure includes the format of each column, which is what
we are interested in. <code class="language-plaintext highlighter-rouge">str()</code> will be reviewed a little more in the lesson
<a href="../13-supp-data-structures/">Data Types and Structures</a>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'data.frame':	100 obs. of  3 variables:
 $ Color: chr  "Green" "1" "Green" "5" ...
 $ Speed: int  32 45 35 34 25 41 34 29 31 26 ...
 $ State: Factor w/ 4 levels "Arizona","Colorado",..: 3 1 2 1 1 1 3 2 1 2 ...
</code></pre></div></div>

<p>We can see that the <code class="language-plaintext highlighter-rouge">$Color</code> and <code class="language-plaintext highlighter-rouge">$State</code> columns are factors and <code class="language-plaintext highlighter-rouge">$Speed</code> is a numeric column.</p>

<p>Now, letâ€™s load the dataset using <code class="language-plaintext highlighter-rouge">stringsAsFactors=FALSE</code>, and see what happens when we try to replace â€˜Blueâ€™ with â€˜Greenâ€™ in the <code class="language-plaintext highlighter-rouge">$Color</code> column:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">stringsAsFactors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">str</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'data.frame':	100 obs. of  3 variables:
 $ Color: chr  "Blue" " Red" "Blue" "White" ...
 $ Speed: int  32 45 35 34 25 41 34 29 31 26 ...
 $ State: chr  "NewMexico" "Arizona" "Colorado" "Arizona" ...
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'Blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Green'</span><span class="p">,</span><span class="w"> </span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  [1] "Green" " Red"  "Green" "White" "Red"   "Green" "Green" "Black" "White"
 [10] "Red"   "Red"   "White" "Green" "Green" "Black" "Red"   "Green" "Green"
 [19] "White" "Green" "Green" "Green" "Red"   "Green" "Red"   "Red"   "Red"  
 [28] "Red"   "White" "Green" "Red"   "White" "Black" "Red"   "Black" "Black"
 [37] "Green" "Red"   "Black" "Red"   "Black" "Black" "Red"   "Red"   "White"
 [46] "Black" "Green" "Red"   "Red"   "Black" "Black" "Red"   "White" "Red"  
 [55] "Green" "Green" "Black" "Green" "White" "Black" "Red"   "Green" "Green"
 [64] "White" "Black" "Red"   "Red"   "Black" "Green" "White" "Green" "Red"  
 [73] "White" "White" "Green" "Green" "Green" "Green" "Green" "White" "Black"
 [82] "Green" "White" "Black" "Black" "Red"   "Red"   "White" "White" "White"
 [91] "White" "Red"   "Red"   "Red"   "White" "Black" "White" "Black" "Black"
[100] "White"
</code></pre></div></div>

<p>Thatâ€™s better! And we can see how the data now is read as character instead of factor.</p>

<h3 id="the-asis-argument">The <code class="language-plaintext highlighter-rouge">as.is</code> Argument</h3>

<p>This is an extension of the <code class="language-plaintext highlighter-rouge">stringsAsFactors</code> argument, but gives you control over individual columns. For example, if we want the colors of cars imported as strings, but we want the names of the states imported as factors, we would load the data set as:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">as.is</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="c1"># Note, the 1 applies as.is to the first column only</span><span class="w">
</span></code></pre></div></div>

<p>Now we can see that if we try to replace â€˜Blueâ€™ with â€˜Greenâ€™ in the <code class="language-plaintext highlighter-rouge">$Color</code> column everything looks fine, while trying to replace â€˜Arizonaâ€™ with â€˜Ohioâ€™ in the <code class="language-plaintext highlighter-rouge">$State</code> column returns the factor numbers for the names of states that we havenâ€™t replaced:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">str</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'data.frame':	100 obs. of  3 variables:
 $ Color: chr  "Blue" " Red" "Blue" "White" ...
 $ Speed: int  32 45 35 34 25 41 34 29 31 26 ...
 $ State: Factor w/ 4 levels "Arizona","Colorado",..: 3 1 2 1 1 1 3 2 1 2 ...
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'Blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Green'</span><span class="p">,</span><span class="w"> </span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  [1] "Green" " Red"  "Green" "White" "Red"   "Green" "Green" "Black" "White"
 [10] "Red"   "Red"   "White" "Green" "Green" "Black" "Red"   "Green" "Green"
 [19] "White" "Green" "Green" "Green" "Red"   "Green" "Red"   "Red"   "Red"  
 [28] "Red"   "White" "Green" "Red"   "White" "Black" "Red"   "Black" "Black"
 [37] "Green" "Red"   "Black" "Red"   "Black" "Black" "Red"   "Red"   "White"
 [46] "Black" "Green" "Red"   "Red"   "Black" "Black" "Red"   "White" "Red"  
 [55] "Green" "Green" "Black" "Green" "White" "Black" "Red"   "Green" "Green"
 [64] "White" "Black" "Red"   "Red"   "Black" "Green" "White" "Green" "Red"  
 [73] "White" "White" "Green" "Green" "Green" "Green" "Green" "White" "Black"
 [82] "Green" "White" "Black" "Black" "Red"   "Red"   "White" "White" "White"
 [91] "White" "Red"   "Red"   "Red"   "White" "Black" "White" "Black" "Black"
[100] "White"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="o">$</span><span class="n">State</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">State</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'Arizona'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Ohio'</span><span class="p">,</span><span class="w"> </span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">State</span><span class="p">)</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">State</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  [1] "3"    "Ohio" "2"    "Ohio" "Ohio" "Ohio" "3"    "2"    "Ohio" "2"   
 [11] "4"    "4"    "4"    "4"    "4"    "3"    "Ohio" "3"    "Ohio" "4"   
 [21] "4"    "4"    "3"    "2"    "2"    "3"    "2"    "4"    "2"    "4"   
 [31] "3"    "2"    "2"    "4"    "2"    "2"    "3"    "Ohio" "4"    "2"   
 [41] "2"    "3"    "Ohio" "4"    "Ohio" "2"    "3"    "3"    "3"    "2"   
 [51] "Ohio" "4"    "4"    "Ohio" "3"    "2"    "4"    "2"    "4"    "4"   
 [61] "4"    "2"    "3"    "2"    "3"    "2"    "3"    "Ohio" "3"    "4"   
 [71] "4"    "2"    "Ohio" "4"    "2"    "2"    "2"    "Ohio" "3"    "Ohio"
 [81] "4"    "2"    "2"    "Ohio" "Ohio" "Ohio" "4"    "Ohio" "4"    "4"   
 [91] "4"    "Ohio" "Ohio" "3"    "2"    "2"    "4"    "3"    "Ohio" "4"   
</code></pre></div></div>
<p>We can see that <code class="language-plaintext highlighter-rouge">$Color</code> column is a character while <code class="language-plaintext highlighter-rouge">$State</code> is a factor.</p>

<blockquote class="challenge">
  <h2 id="updating-values-in-a-factor">Updating Values in a Factor</h2>

  <p>Suppose we want to keep the colors of cars as factors for some other operations we want to perform.
Write code for replacing â€˜Blueâ€™ with â€˜Greenâ€™ in the <code class="language-plaintext highlighter-rouge">$Color</code> column of the cars dataset
without importing the data with <code class="language-plaintext highlighter-rouge">stringsAsFactors=FALSE</code>.</p>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>
    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">)</span><span class="w">
</span><span class="c1"># Replace 'Blue' with 'Green' in cars$Color without using the stringsAsFactors</span><span class="w">
</span><span class="c1"># or as.is arguments</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="nf">as.character</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'Blue'</span><span class="p">,</span><span class="w">
                         </span><span class="s1">'Green'</span><span class="p">,</span><span class="w">
                         </span><span class="nf">as.character</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">))</span><span class="w">
</span><span class="c1"># Convert colors back to factors</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </blockquote>
</blockquote>

<h3 id="the-stripwhite-argument">The <code class="language-plaintext highlighter-rouge">strip.white</code> Argument</h3>

<p>It is not uncommon for mistakes to have been made when the data were recorded, for example a space (whitespace) may have been inserted before a data value. By default this whitespace will be kept in the R environment, such that â€˜\ Redâ€™ will be recognized as a different value than â€˜Redâ€™. In order to avoid this type of error, use the <code class="language-plaintext highlighter-rouge">strip.white</code> argument. Letâ€™s see how this works by checking for the unique values in the <code class="language-plaintext highlighter-rouge">$Color</code> column of our dataset:</p>

<p>Here, the data recorder added a space before the color of the car in one of the cells:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We use the built-in unique() function to extract the unique colors in our dataset</span><span class="w">
</span><span class="n">unique</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] Green  Red  White Red   Black
Levels:  Red Black Green Red White
</code></pre></div></div>

<p>Oops, we see two values for red cars.</p>

<p>Letâ€™s try again, this time importing the data using the <code class="language-plaintext highlighter-rouge">strip.white</code> argument. NOTE - this argument must be accompanied by the <code class="language-plaintext highlighter-rouge">sep</code> argument, by which we indicate the type of delimiter in the file (the comma for most .csv files)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carSpeeds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="w">
  </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds.csv'</span><span class="p">,</span><span class="w">
  </span><span class="n">stringsAsFactors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> 
  </span><span class="n">strip.white</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
  </span><span class="n">sep</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">','</span><span class="w">
  </span><span class="p">)</span><span class="w">

</span><span class="n">unique</span><span class="p">(</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Color</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] "Blue"  "Red"   "White" "Black"
</code></pre></div></div>

<p>Thatâ€™s better!</p>

<h3 id="write-a-new-csv-and-explore-the-arguments">Write a New .csv and Explore the Arguments</h3>

<p>After altering our cars dataset by replacing â€˜Blueâ€™ with â€˜Greenâ€™ in the <code class="language-plaintext highlighter-rouge">$Color</code> column, we now want to save the output. There are several arguments for the <code class="language-plaintext highlighter-rouge">write.csv(...)</code> <a href="../reference.html#function-call">function call</a>, a few of which are particularly important for how the data are exported.  Letâ€™s explore these now.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Export the data. The write.csv() function requires a minimum of two</span><span class="w">
</span><span class="c1"># arguments, the data to be saved and the name of the output file.</span><span class="w">

</span><span class="n">write.csv</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds-cleaned.csv'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>If you open the file, youâ€™ll see that it has header names, because the data had headers within R, but that there are numbers in the first column.</p>

<p><img src="../fig/01-supp-csv-with-row-nums.png" alt="csv written without row.names argument" /></p>

<h3 id="the-rownames-argument">The <code class="language-plaintext highlighter-rouge">row.names</code> Argument</h3>

<p>This argument allows us to set the names of the rows in the output data file. Râ€™s default for this argument is <code class="language-plaintext highlighter-rouge">TRUE</code>, and since it does not know what else to name the rows for the cars data set, it resorts to using row numbers. To correct this, we can set <code class="language-plaintext highlighter-rouge">row.names</code> to <code class="language-plaintext highlighter-rouge">FALSE</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">write.csv</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds-cleaned.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now we see:</p>

<p><img src="../fig/01-supp-csv-without-row-nums.png" alt="csv written with row.names argument" /></p>

<blockquote class="callout">
  <h2 id="setting-column-names">Setting Column Names</h2>

  <p>There is also a <code class="language-plaintext highlighter-rouge">col.names</code> argument, which can be used to set the column
names for a data set without headers. If the data set already has headers
(e.g., we used the <code class="language-plaintext highlighter-rouge">headers = TRUE</code> argument when importing the data) then a
<code class="language-plaintext highlighter-rouge">col.names</code> argument will be ignored.</p>
</blockquote>

<h3 id="the-na-argument">The <code class="language-plaintext highlighter-rouge">na</code> Argument</h3>

<p>There are times when we want to specify certain values for <code class="language-plaintext highlighter-rouge">NA</code>s in the data set (e.g., we are going to pass the data to a program that only accepts -9999 as a nodata value). In this case, we want to set the <code class="language-plaintext highlighter-rouge">NA</code> value of our output file to the desired value, using the na argument. Letâ€™s see how this works:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First, replace the speed in the 3rd row with NA, by using an index (square</span><span class="w">
</span><span class="c1"># brackets to indicate the position of the value we want to replace)</span><span class="w">
</span><span class="n">carSpeeds</span><span class="o">$</span><span class="n">Speed</span><span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NA</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Color Speed     State
1  Blue    32 NewMexico
2   Red    45   Arizona
3  Blue    NA  Colorado
4 White    34   Arizona
5   Red    25   Arizona
6  Blue    41   Arizona
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">write.csv</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds-cleaned.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now weâ€™ll set <code class="language-plaintext highlighter-rouge">NA</code> to -9999 when we write the new .csv file:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Note - the na argument requires a string input</span><span class="w">
</span><span class="n">write.csv</span><span class="p">(</span><span class="n">carSpeeds</span><span class="p">,</span><span class="w">
          </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'data/car-speeds-cleaned.csv'</span><span class="p">,</span><span class="w">
          </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w">
          </span><span class="n">na</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'-9999'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>And we see:</p>

<p><img src="../fig/01-supp-csv-with-special-NA.png" alt="csv written with -9999 as NA" /></p>

:ET