I"`<p>In R you have multiple options when repeating calculations: vectorized operations, <code class="language-plaintext highlighter-rouge">for</code> loops, and <code class="language-plaintext highlighter-rouge">apply</code> functions.</p>

<p>This lesson is an extension of <a href="../03-loops-R/">Analyzing Multiple Data Sets</a>.
In that lesson, we introduced how to run a custom function, <code class="language-plaintext highlighter-rouge">analyze</code>, over multiple data files:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">analyze</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="c1"># Plots the average, min, and max inflammation over time.</span><span class="w">
  </span><span class="c1"># Input is character string of a csv file.</span><span class="w">
  </span><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">filename</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
  </span><span class="n">avg_day_inflammation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">dat</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)</span><span class="w">
  </span><span class="n">plot</span><span class="p">(</span><span class="n">avg_day_inflammation</span><span class="p">)</span><span class="w">
  </span><span class="n">max_day_inflammation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">dat</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="w">
  </span><span class="n">plot</span><span class="p">(</span><span class="n">max_day_inflammation</span><span class="p">)</span><span class="w">
  </span><span class="n">min_day_inflammation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">dat</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="p">)</span><span class="w">
  </span><span class="n">plot</span><span class="p">(</span><span class="n">min_day_inflammation</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filenames</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">list.files</span><span class="p">(</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"data"</span><span class="p">,</span><span class="w"> </span><span class="n">pattern</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"inflammation-[0-9]{2}.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">full.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="vectorized-operations">Vectorized Operations</h3>

<p>A key difference between R and many other languages is a topic known as vectorization.
When you wrote the <code class="language-plaintext highlighter-rouge">total</code> function, we mentioned that R already has <code class="language-plaintext highlighter-rouge">sum</code> to do this; <code class="language-plaintext highlighter-rouge">sum</code> is <em>much</em> faster than the interpreted <code class="language-plaintext highlighter-rouge">for</code> loop because <code class="language-plaintext highlighter-rouge">sum</code> is coded in C to work with a vector of numbers.
Many of Râ€™s functions work this way; the loop is hidden from you in C.
Learning to use vectorized operations is a key skill in R.</p>

<p>For example, to add pairs of numbers contained in two vectors</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span></code></pre></div></div>

<p>You could loop over the pairs adding each in turn, but that would be very inefficient in R.</p>

<p>Instead of using <code class="language-plaintext highlighter-rouge">i in a</code> to make our loop variable, we use the function <code class="language-plaintext highlighter-rouge">seq_along</code> to generate indices for each element <code class="language-plaintext highlighter-rouge">a</code> contains.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">numeric</span><span class="p">(</span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">a</span><span class="p">))</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">seq_along</span><span class="p">(</span><span class="n">a</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">res</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  2  4  6  8 10 12 14 16 18 20
</code></pre></div></div>

<p>Instead, <code class="language-plaintext highlighter-rouge">+</code> is a <em>vectorized</em> function which can operate on entire vectors at once</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">
</span><span class="n">all.equal</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="w"> </span><span class="n">res2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] TRUE
</code></pre></div></div>

<h3 id="vector-recycling">Vector Recycling</h3>

<p>When performing vector operations in R, it is important to know about recycling. If you perform an operation on two or more vectors of unequal length, R will recycle elements of the shorter vector(s) to match the longest vector.  For example:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">
</span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  2  4  6  8 10  7  9 11 13 15
</code></pre></div></div>

<p>The elements of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> are added together starting from the first element of both vectors. When R reaches the end of the shorter vector <code class="language-plaintext highlighter-rouge">b</code>, it starts again at the first element of <code class="language-plaintext highlighter-rouge">b</code> and continues until it reaches the last element of the longest vector <code class="language-plaintext highlighter-rouge">a</code>.  This behaviour may seem crazy at first glance, but it is very useful when you want to perform the same operation on every element of a vector. For example, say we want to multiply every element of our vector <code class="language-plaintext highlighter-rouge">a</code> by 5:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="n">a</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  5 10 15 20 25 30 35 40 45 50
</code></pre></div></div>

<p>Remember there are no scalars in R, so <code class="language-plaintext highlighter-rouge">b</code> is actually a vector of length 1; in order to add its value to every element of <code class="language-plaintext highlighter-rouge">a</code>, it is <em>recycled</em> to match the length of <code class="language-plaintext highlighter-rouge">a</code>.</p>

<p>When the length of the longer object is a multiple of the shorter object length (as in our example above), the recycling occurs silently. When the longer object length is not a multiple of the shorter object length, a warning is given:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="w">
</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">7</span><span class="w">
</span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning in a + b: longer object length is not a multiple of shorter object
length
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [1]  2  4  6  8 10 12 14  9 11 13
</code></pre></div></div>

<h3 id="for-or-apply"><code class="language-plaintext highlighter-rouge">for</code> or <code class="language-plaintext highlighter-rouge">apply</code>?</h3>

<p>A <code class="language-plaintext highlighter-rouge">for</code> loop is used to apply the same function calls to a collection of objects.
R has a family of functions, the <code class="language-plaintext highlighter-rouge">apply</code> family, which can be used in much the same way.
Youâ€™ve already used one of the family, <code class="language-plaintext highlighter-rouge">apply</code> in the first <a href="../01-starting-with-data/">lesson</a>.
The <code class="language-plaintext highlighter-rouge">apply</code> family members include</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">apply</code>  - apply over the margins of an array (e.g. the rows or columns of a matrix)</li>
  <li><code class="language-plaintext highlighter-rouge">lapply</code> - apply over an object and return list</li>
  <li><code class="language-plaintext highlighter-rouge">sapply</code> - apply over an object and return a simplified object (an array) if possible</li>
  <li><code class="language-plaintext highlighter-rouge">vapply</code> - similar to <code class="language-plaintext highlighter-rouge">sapply</code> but you specify the type of object returned by the iterations</li>
</ul>

<p>Each of these has an argument <code class="language-plaintext highlighter-rouge">FUN</code> which takes a function to apply to each element of the object.
Instead of looping over <code class="language-plaintext highlighter-rouge">filenames</code> and calling <code class="language-plaintext highlighter-rouge">analyze</code>, as you did earlier, you could <code class="language-plaintext highlighter-rouge">sapply</code> over <code class="language-plaintext highlighter-rouge">filenames</code> with <code class="language-plaintext highlighter-rouge">FUN = analyze</code>:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sapply</span><span class="p">(</span><span class="n">filenames</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">analyze</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Deciding whether to use <code class="language-plaintext highlighter-rouge">for</code> or one of the <code class="language-plaintext highlighter-rouge">apply</code> family is really personal preference.
Using an <code class="language-plaintext highlighter-rouge">apply</code> family function forces to you encapsulate your operations as a function rather than separate calls with <code class="language-plaintext highlighter-rouge">for</code>.
<code class="language-plaintext highlighter-rouge">for</code> loops are often more natural in some circumstances; for several related operations, a <code class="language-plaintext highlighter-rouge">for</code> loop will avoid you having to pass in a lot of extra arguments to your function.</p>

<h3 id="loops-in-r-are-slow">Loops in R Are Slow</h3>

<p>No, they are not! <em>If</em> you follow some golden rules:</p>

<ol>
  <li>Donâ€™t use a loop when a vectorized alternative exists</li>
  <li>Donâ€™t grow objects (via <code class="language-plaintext highlighter-rouge">c</code>, <code class="language-plaintext highlighter-rouge">cbind</code>, etc) during the loop - R has to create a new object and copy across the information just to add a new element or row/column</li>
  <li>Allocate an object to hold the results and fill it in during the loop</li>
</ol>

<p>As an example, weâ€™ll create a new version of <code class="language-plaintext highlighter-rouge">analyze</code> that will return the mean inflammation per day (column) of each file.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">analyze2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">filenames</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">f</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">seq_along</span><span class="p">(</span><span class="n">filenames</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">fdata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">filenames</span><span class="p">[</span><span class="n">f</span><span class="p">],</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
    </span><span class="n">res</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">fdata</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">f</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">res</span><span class="w">
    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="c1"># The loop is slowed by this call to cbind that grows the object</span><span class="w">
      </span><span class="n">out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">system.time</span><span class="p">(</span><span class="n">avg2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analyze2</span><span class="p">(</span><span class="n">filenames</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   user  system elapsed 
  0.033   0.000   0.033 
</code></pre></div></div>

<p>Note how we add a new column to <code class="language-plaintext highlighter-rouge">out</code> at each iteration?
This is a cardinal sin of writing a <code class="language-plaintext highlighter-rouge">for</code> loop in R.</p>

<p>Instead, we can create an empty matrix with the right dimensions (rows/columns) to hold the results.
Then we loop over the files but this time we fill in the <code class="language-plaintext highlighter-rouge">f</code>th column of our results matrix <code class="language-plaintext highlighter-rouge">out</code>.
This time there is no copying/growing for R to deal with.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">analyze3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">filenames</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">filenames</span><span class="p">),</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">40</span><span class="p">)</span><span class="w"> </span><span class="c1"># assuming 40 here from files</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">f</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">seq_along</span><span class="p">(</span><span class="n">filenames</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">fdata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">filenames</span><span class="p">[</span><span class="n">f</span><span class="p">],</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
    </span><span class="n">out</span><span class="p">[,</span><span class="w"> </span><span class="n">f</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">fdata</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">system.time</span><span class="p">(</span><span class="n">avg3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analyze3</span><span class="p">(</span><span class="n">filenames</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   user  system elapsed 
  0.031   0.000   0.031 
</code></pre></div></div>

<p>In this simple example there is little difference in the compute time of <code class="language-plaintext highlighter-rouge">analyze2</code> and <code class="language-plaintext highlighter-rouge">analyze3</code>.
This is because we are only iterating over 12 files and hence we only incur 12 copy/grow operations.
If we were doing this over more files or the data objects we were growing were larger, the penalty for copying/growing would be much larger.</p>

<p>Note that <code class="language-plaintext highlighter-rouge">apply</code> handles these memory allocation issues for you, but then you have to write the loop part as a function to pass to <code class="language-plaintext highlighter-rouge">apply</code>.
At its heart, <code class="language-plaintext highlighter-rouge">apply</code> is just a <code class="language-plaintext highlighter-rouge">for</code> loop with extra convenience.</p>

:ET